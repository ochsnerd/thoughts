#+title: Haskell on Nixos

* Cabal
see https://github.com/mhwombat/nix-for-numbskulls/blob/78bcc186f79931c0e4a1e445e2f6b1f12f6d46be/Haskell/ss-haskell-dev.md

1. Set up cabal (gives full-on project structure)
   #+begin_src
   nix-shell --packages haskellPackages.cabal-install  --run 'cabal init'
   #+end_src
2. Write the following ~default.nix~
   #+begin_quote
   { nixpkgs ? import <nixpkgs> {}}:
   nixpkgs.haskellPackages.developPackage { root = ./.; }
   #+end_quote
   optional:
   #+begin_src
   direnv allow && echo "use nix" > .envrc
   #+end_src
3. Add a dependency (from Hackage?)
   #+begin_quote
   build-depends:  base ^>4.17.2.1, random
   #+end_quote
4. Build with ~nix-build~
5. either in ~nix-shell --command ghci~ or plain ~ghci~ (if direnv), now have
   access to packages
   
* shebang
#+begin_quote
#!/usr/bin/env nix-shell
#!nix-shell --pure -i runghc -p "haskellPackages.ghcWithPackages (pkgs: [ pkgs.MonadRandom])"
#+end_quote

LSP doesn't know about the installed packages

* buildInputs

For a script using random and matplotlib

#+begin_src nix
{ pkgs ? import <nixpkgs> {}}:
pkgs.mkShell {
  buildInputs = [
    (pkgs.haskellPackages.ghcWithPackages (haskellPackages: with haskellPackages; [
      random
      MonadRandom
      haskell-language-server
      split
      matplotlib
    ]))
    (pkgs.python312.withPackages (ps: [
      ps.matplotlib
      ps.scipy
    ]))
  ];
}
#+end_src

* Some reddit thread
https://www.reddit.com/r/haskell/comments/1g2azyv/setting_up_haskell_toolchain_and_an_ide_on_nixos/

* Project template
https://github.com/jonascarpay/template-haskell/

Gives a project setup that works for stack, cabal, nix flakes.

Direnv with flakes is =use flake= instead of =use nix=
